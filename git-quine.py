#!/usr/bin/python3

"""

########################################
# What is this? ########################
########################################

This is a python program that prints the git commit hash of its own git
repository.

########################################
# *!* Inspiration *!* ##################
########################################

At the heart of it lies a quine: a program that prints it own source code. Only
here, we do not print it, but simply reconstruct it in memory and then perform
some computation based on it.

I got fascinated with quines after reading "GEB: an Eternal Golden Braid".
Another inspiration for this exact repo is this IOCCC entry:
https://www.ioccc.org/2019/diels-grabsch2/hint.html A program that prints its
own SHA-512 hash.

The git-specific internals information was taken from the git book
https://git-scm.com/book/en/v2/Git-Internals-Git-Objects
and from the git documentation itself in the gitcore-tutorial
https://github.com/git/git/blob/master/Documentation/gitcore-tutorial.txt
But the most helpful thing in getting at the git format right for calculating
the hashes was actually looking at existing git repositories and the files:

    # list all objects by hash
    git cat-file --batch-check --batch-all-objects
    find .git/objects/ -type f

    # show human-readable representation of the git object
    git cat-file -p $HASH

    # python code for showing actual bytes after decompressing them
    with open(sys.argv[1], "rb") as f: print(zlib.decompress(f.read()))

########################################
# Things to note: ######################
########################################

In order to be able to exactly pre-compute the git commit hash we have to fix
all data that would otherwise change. Here, this affects the timestamps.
In git, we have to deal with the following objects:

    ```
    $ git cat-file --batch-check --batch-all-objects
    <COMMIT_HASH> commit <COMMIT_LENGTH>
    <BLOB_HASH> blob <BLOB_LENGTH>
    <TREE_HASH> tree <TREE_LENGTH>
    ```

- commit

    ```
    $ git cat-file -p <COMMIT_HASH>
    tree <TREE_HASH>
    author <AUTHOR> <AUTHOR_DATE>
    committer <COMMITER> <COMMIT_DATE>

    <COMMIT_MESSAGE>

    # zlib decompress .git/objects/<COMMIT_HASH_FIRST_2_BYTES>/<COMMIT_HASH_REST>
    b'commit <LENGTH>\x00tree <TREE_HASH>\nauthor <AUTHOR> <AUTHOR_DATE>\ncommitter <COMMITER> <COMMIT_DATE>\n\n<COMMIT_MESSAGE>\n'
    ```

- tree

    ```
    $ git cat-file -p <TREE_HASH>
    100644 blob <BLOB_HASH>    git-quine.py

    # zlib decompress .git/objects/<TREE_HASH_FIRST_2_CHARS>/<TREE_HASH_REST>
    b'tree <TREE_LENGTH>\x00100644 git-quine.py\x00<BLOB_HASH_BINARY>'
    ```

- blob

    ```
    $ git cat-file -p <BLOB_HASH>
    <BLOB_CONTENTS>

    # zlib decmpress .git/objects/<BLOB_HASH_FIRST_2_CHARS>/<BLOB_HASH_REST>
    b'blob <BLOB_LENGTH>\x00<BLOB_CONTENTS>'
    ```

All in all, if we fixate the following timestamps the whole thing becomes
reproducible bit-by-bit:

- git author date

- git commit date

This can be achieved as follows:

    ```
    DATE=$(date +%s)
    export GIT_AUTHOR_DATE=$DATE
    export GIT_COMMITTER_DATE=$DATE
    ```

"""

import hashlib
import sys

################################################################################
# main part ####################################################################
################################################################################


def main():
    src = get_own_src()

    if len(sys.argv) >= 2 and sys.argv[1] == "quine":
        # printing my own source code
        print(src.decode(), end="")

    else:
        print("################################################")
        print("# Printing some stats about my own source code #")
        print("################################################")
        print()
        print("[+] file length:   ", len(src))
        print("[+] file sha512sum:", hashlib.sha512(src).hexdigest())
        print()

        blob, blob_hash = get_git_blob(src)
        tree, tree_hash = get_git_tree(bytes.fromhex(blob_hash))
        commit, commit_hash = get_git_commit(tree_hash)

        print("[+] git BLOB_HASH:      ", blob_hash)
        print()
        print("[+] git TREE_HASH:      ", tree_hash)
        print("[+] git TREE contents:  ", tree)
        print()
        print("[+] git COMMIT_HASH:    ", commit_hash)
        print("[+] git COMMIT contents:", commit)


def get_own_src():
    """Return the source code of the file git-quine.py itself as a string."""
    res = b""

    res += bytes.fromhex(data)

    res += b"data = (\n"

    chunksize = 64
    for i in range(0, len(data), chunksize):
        res += b'    "' + data[i : i + chunksize].encode() + b'"\n'

    res += b")\n"
    res += b"\n"
    res += b"main()\n"

    return res


def get_git_blob(content):
    header = b"blob " + str(len(content)).encode() + b"\x00"
    blob = header + content
    blob_hash = hashlib.sha1(blob).hexdigest()
    return (blob, blob_hash)


def get_git_tree(blob_hash):
    content = b"100644 git-quine.py\x00" + blob_hash
    header = b"tree " + str(len(content)).encode() + b"\x00"
    tree = header + content
    tree_hash = hashlib.sha1(tree).hexdigest()
    return (tree, tree_hash)


def get_git_commit(tree_hash):
    timestamp = b"1733958000"
    content = (
        b"tree " + tree_hash.encode() + b"\n"
        b"author Stefan Walter <stefan [underscore] walter [at] posteo [dot] de> "
        + timestamp
        + b" +0100\n"
        b"committer Stefan Walter <stefan [underscore] walter [at] posteo [dot] de> "
        + timestamp
        + b" +0100\n\n"
        b"git-quine: a program that prints its own commit hash\n"
    )
    header = b"commit " + str(len(content)).encode() + b"\x00"
    commit = header + content
    commit_hash = hashlib.sha1(commit).hexdigest()
    return (commit, commit_hash)


################################################################################
# autogen starts here ##########################################################
################################################################################

# note: this part can be generated with the following code:
#
#     with open("git-quine.py") as f:
#         data = f.read()
#
#     encoded = "".join(["{:02X}".format(ord(c)) for c in data])
#
#     chunksize = 64
#
#     print("data = (")
#     for i in range(0, len(encoded), chunksize):
#         print('    "{}"'.format(encoded[i : i + chunksize]))
#     print(")")
#     print()
#     print("main()")

data = (
    "23212F7573722F62696E2F707974686F6E330A0A2222220A0A23232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "230A23205768617420697320746869733F202323232323232323232323232323"
    "232323232323232323230A232323232323232323232323232323232323232323"
    "232323232323232323232323232323232323230A0A5468697320697320612070"
    "7974686F6E2070726F6772616D2074686174207072696E747320746865206769"
    "7420636F6D6D69742068617368206F6620697473206F776E206769740A726570"
    "6F7369746F72792E0A0A23232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323230A23202A212A20496E7370697261"
    "74696F6E202A212A202323232323232323232323232323232323230A23232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "232323230A0A417420746865206865617274206F66206974206C696573206120"
    "7175696E653A20612070726F6772616D2074686174207072696E747320697420"
    "6F776E20736F7572636520636F64652E204F6E6C790A686572652C2077652064"
    "6F206E6F74207072696E742069742C206275742073696D706C79207265636F6E"
    "73747275637420697420696E206D656D6F727920616E64207468656E20706572"
    "666F726D0A736F6D6520636F6D7075746174696F6E206261736564206F6E2069"
    "742E0A0A4920676F742066617363696E617465642077697468207175696E6573"
    "2061667465722072656164696E6720224745423A20616E20457465726E616C20"
    "476F6C64656E204272616964222E0A416E6F7468657220696E73706972617469"
    "6F6E20666F722074686973206578616374207265706F20697320746869732049"
    "4F43434320656E7472793A0A68747470733A2F2F7777772E696F6363632E6F72"
    "672F323031392F6469656C732D67726162736368322F68696E742E68746D6C20"
    "412070726F6772616D2074686174207072696E7473206974730A6F776E205348"
    "412D35313220686173682E0A0A546865206769742D737065636966696320696E"
    "7465726E616C7320696E666F726D6174696F6E207761732074616B656E206672"
    "6F6D207468652067697420626F6F6B0A68747470733A2F2F6769742D73636D2E"
    "636F6D2F626F6F6B2F656E2F76322F4769742D496E7465726E616C732D476974"
    "2D4F626A656374730A616E642066726F6D207468652067697420646F63756D65"
    "6E746174696F6E20697473656C6620696E2074686520676974636F72652D7475"
    "746F7269616C0A68747470733A2F2F6769746875622E636F6D2F6769742F6769"
    "742F626C6F622F6D61737465722F446F63756D656E746174696F6E2F67697463"
    "6F72652D7475746F7269616C2E7478740A42757420746865206D6F7374206865"
    "6C7066756C207468696E6720696E2067657474696E6720617420746865206769"
    "7420666F726D617420726967687420666F722063616C63756C6174696E670A74"
    "686520686173686573207761732061637475616C6C79206C6F6F6B696E672061"
    "74206578697374696E6720676974207265706F7369746F7269657320616E6420"
    "7468652066696C65733A0A0A2020202023206C69737420616C6C206F626A6563"
    "747320627920686173680A20202020676974206361742D66696C65202D2D6261"
    "7463682D636865636B202D2D62617463682D616C6C2D6F626A656374730A2020"
    "202066696E64202E6769742F6F626A656374732F202D7479706520660A0A2020"
    "2020232073686F772068756D616E2D7265616461626C6520726570726573656E"
    "746174696F6E206F662074686520676974206F626A6563740A20202020676974"
    "206361742D66696C65202D702024484153480A0A202020202320707974686F6E"
    "20636F646520666F722073686F77696E672061637475616C2062797465732061"
    "66746572206465636F6D7072657373696E67207468656D0A2020202077697468"
    "206F70656E287379732E617267765B315D2C20227262222920617320663A2070"
    "72696E74287A6C69622E6465636F6D707265737328662E72656164282929290A"
    "0A23232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323230A23205468696E677320746F206E6F74653A2023232323"
    "2323232323232323232323232323232323230A23232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323230A0A496E20"
    "6F7264657220746F2062652061626C6520746F2065786163746C79207072652D"
    "636F6D70757465207468652067697420636F6D6D697420686173682077652068"
    "61766520746F206669780A616C6C2064617461207468617420776F756C64206F"
    "7468657277697365206368616E67652E20486572652C20746869732061666665"
    "637473207468652074696D657374616D70732E0A496E206769742C2077652068"
    "61766520746F206465616C20776974682074686520666F6C6C6F77696E67206F"
    "626A656374733A0A0A202020206060600A202020202420676974206361742D66"
    "696C65202D2D62617463682D636865636B202D2D62617463682D616C6C2D6F62"
    "6A656374730A202020203C434F4D4D49545F484153483E20636F6D6D6974203C"
    "434F4D4D49545F4C454E4754483E0A202020203C424C4F425F484153483E2062"
    "6C6F62203C424C4F425F4C454E4754483E0A202020203C545245455F48415348"
    "3E2074726565203C545245455F4C454E4754483E0A202020206060600A0A2D20"
    "636F6D6D69740A0A202020206060600A202020202420676974206361742D6669"
    "6C65202D70203C434F4D4D49545F484153483E0A2020202074726565203C5452"
    "45455F484153483E0A20202020617574686F72203C415554484F523E203C4155"
    "54484F525F444154453E0A20202020636F6D6D6974746572203C434F4D4D4954"
    "45523E203C434F4D4D49545F444154453E0A0A202020203C434F4D4D49545F4D"
    "4553534147453E0A0A2020202023207A6C6962206465636F6D7072657373202E"
    "6769742F6F626A656374732F3C434F4D4D49545F484153485F46495253545F32"
    "5F42595445533E2F3C434F4D4D49545F484153485F524553543E0A2020202062"
    "27636F6D6D6974203C4C454E4754483E5C78303074726565203C545245455F48"
    "4153483E5C6E617574686F72203C415554484F523E203C415554484F525F4441"
    "54453E5C6E636F6D6D6974746572203C434F4D4D495445523E203C434F4D4D49"
    "545F444154453E5C6E5C6E3C434F4D4D49545F4D4553534147453E5C6E270A20"
    "2020206060600A0A2D20747265650A0A202020206060600A2020202024206769"
    "74206361742D66696C65202D70203C545245455F484153483E0A202020203130"
    "3036343420626C6F62203C424C4F425F484153483E202020206769742D717569"
    "6E652E70790A0A2020202023207A6C6962206465636F6D7072657373202E6769"
    "742F6F626A656374732F3C545245455F484153485F46495253545F325F434841"
    "52533E2F3C545245455F484153485F524553543E0A2020202062277472656520"
    "3C545245455F4C454E4754483E5C783030313030363434206769742D7175696E"
    "652E70795C7830303C424C4F425F484153485F42494E4152593E270A20202020"
    "6060600A0A2D20626C6F620A0A202020206060600A2020202024206769742063"
    "61742D66696C65202D70203C424C4F425F484153483E0A202020203C424C4F42"
    "5F434F4E54454E54533E0A0A2020202023207A6C6962206465636D7072657373"
    "202E6769742F6F626A656374732F3C424C4F425F484153485F46495253545F32"
    "5F43484152533E2F3C424C4F425F484153485F524553543E0A20202020622762"
    "6C6F62203C424C4F425F4C454E4754483E5C7830303C424C4F425F434F4E5445"
    "4E54533E270A202020206060600A0A416C6C20696E20616C6C2C206966207765"
    "206669786174652074686520666F6C6C6F77696E672074696D657374616D7073"
    "207468652077686F6C65207468696E67206265636F6D65730A726570726F6475"
    "6369626C65206269742D62792D6269743A0A0A2D2067697420617574686F7220"
    "646174650A0A2D2067697420636F6D6D697420646174650A0A54686973206361"
    "6E20626520616368696576656420617320666F6C6C6F77733A0A0A2020202060"
    "60600A20202020444154453D242864617465202B2573290A202020206578706F"
    "7274204749545F415554484F525F444154453D24444154450A20202020657870"
    "6F7274204749545F434F4D4D49545445525F444154453D24444154450A202020"
    "206060600A0A2222220A0A696D706F727420686173686C69620A696D706F7274"
    "207379730A0A2323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "232323232323232323232323232323232323232323230A23206D61696E207061"
    "7274202323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "232323232323230A232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323230A0A0A646566206D"
    "61696E28293A0A20202020737263203D206765745F6F776E5F73726328290A0A"
    "202020206966206C656E287379732E6172677629203E3D203220616E64207379"
    "732E617267765B315D203D3D20227175696E65223A0A20202020202020202320"
    "7072696E74696E67206D79206F776E20736F7572636520636F64650A20202020"
    "202020207072696E74287372632E6465636F646528292C20656E643D2222290A"
    "0A20202020656C73653A0A20202020202020207072696E742822232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232322290A20202020202020207072696E74282223205072"
    "696E74696E6720736F6D652073746174732061626F7574206D79206F776E2073"
    "6F7572636520636F6465202322290A20202020202020207072696E7428222323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "232323232323232323232323232322290A20202020202020207072696E742829"
    "0A20202020202020207072696E7428225B2B5D2066696C65206C656E6774683A"
    "202020222C206C656E2873726329290A20202020202020207072696E7428225B"
    "2B5D2066696C652073686135313273756D3A222C20686173686C69622E736861"
    "35313228737263292E6865786469676573742829290A20202020202020207072"
    "696E7428290A0A2020202020202020626C6F622C20626C6F625F68617368203D"
    "206765745F6769745F626C6F6228737263290A2020202020202020747265652C"
    "20747265655F68617368203D206765745F6769745F747265652862797465732E"
    "66726F6D68657828626C6F625F6861736829290A2020202020202020636F6D6D"
    "69742C20636F6D6D69745F68617368203D206765745F6769745F636F6D6D6974"
    "28747265655F68617368290A0A20202020202020207072696E7428225B2B5D20"
    "67697420424C4F425F484153483A202020202020222C20626C6F625F68617368"
    "290A20202020202020207072696E7428290A20202020202020207072696E7428"
    "225B2B5D2067697420545245455F484153483A202020202020222C2074726565"
    "5F68617368290A20202020202020207072696E7428225B2B5D20676974205452"
    "454520636F6E74656E74733A2020222C2074726565290A202020202020202070"
    "72696E7428290A20202020202020207072696E7428225B2B5D2067697420434F"
    "4D4D49545F484153483A20202020222C20636F6D6D69745F68617368290A2020"
    "2020202020207072696E7428225B2B5D2067697420434F4D4D495420636F6E74"
    "656E74733A222C20636F6D6D6974290A0A0A646566206765745F6F776E5F7372"
    "6328293A0A2020202022222252657475726E2074686520736F7572636520636F"
    "6465206F66207468652066696C65206769742D7175696E652E70792069747365"
    "6C66206173206120737472696E672E2222220A20202020726573203D20622222"
    "0A0A20202020726573202B3D2062797465732E66726F6D686578286461746129"
    "0A0A20202020726573202B3D20622264617461203D20285C6E220A0A20202020"
    "6368756E6B73697A65203D2036340A20202020666F72206920696E2072616E67"
    "6528302C206C656E2864617461292C206368756E6B73697A65293A0A20202020"
    "20202020726573202B3D206227202020202227202B20646174615B69203A2069"
    "202B206368756E6B73697A655D2E656E636F64652829202B206227225C6E270A"
    "0A20202020726573202B3D206222295C6E220A20202020726573202B3D206222"
    "5C6E220A20202020726573202B3D2062226D61696E28295C6E220A0A20202020"
    "72657475726E207265730A0A0A646566206765745F6769745F626C6F6228636F"
    "6E74656E74293A0A20202020686561646572203D206222626C6F622022202B20"
    "737472286C656E28636F6E74656E7429292E656E636F64652829202B2062225C"
    "783030220A20202020626C6F62203D20686561646572202B20636F6E74656E74"
    "0A20202020626C6F625F68617368203D20686173686C69622E7368613128626C"
    "6F62292E68657864696765737428290A2020202072657475726E2028626C6F62"
    "2C20626C6F625F68617368290A0A0A646566206765745F6769745F7472656528"
    "626C6F625F68617368293A0A20202020636F6E74656E74203D20622231303036"
    "3434206769742D7175696E652E70795C78303022202B20626C6F625F68617368"
    "0A20202020686561646572203D206222747265652022202B20737472286C656E"
    "28636F6E74656E7429292E656E636F64652829202B2062225C783030220A2020"
    "202074726565203D20686561646572202B20636F6E74656E740A202020207472"
    "65655F68617368203D20686173686C69622E736861312874726565292E686578"
    "64696765737428290A2020202072657475726E2028747265652C20747265655F"
    "68617368290A0A0A646566206765745F6769745F636F6D6D697428747265655F"
    "68617368293A0A2020202074696D657374616D70203D20622231373333393538"
    "303030220A20202020636F6E74656E74203D20280A2020202020202020622274"
    "7265652022202B20747265655F686173682E656E636F64652829202B2062225C"
    "6E220A20202020202020206222617574686F722053746566616E2057616C7465"
    "72203C73746566616E205B756E64657273636F72655D2077616C746572205B61"
    "745D20706F7374656F205B646F745D2064653E20220A20202020202020202B20"
    "74696D657374616D700A20202020202020202B206222202B303130305C6E220A"
    "20202020202020206222636F6D6D69747465722053746566616E2057616C7465"
    "72203C73746566616E205B756E64657273636F72655D2077616C746572205B61"
    "745D20706F7374656F205B646F745D2064653E20220A20202020202020202B20"
    "74696D657374616D700A20202020202020202B206222202B303130305C6E5C6E"
    "220A202020202020202062226769742D7175696E653A20612070726F6772616D"
    "2074686174207072696E747320697473206F776E20636F6D6D69742068617368"
    "5C6E220A20202020290A20202020686561646572203D206222636F6D6D697420"
    "22202B20737472286C656E28636F6E74656E7429292E656E636F64652829202B"
    "2062225C783030220A20202020636F6D6D6974203D20686561646572202B2063"
    "6F6E74656E740A20202020636F6D6D69745F68617368203D20686173686C6962"
    "2E7368613128636F6D6D6974292E68657864696765737428290A202020207265"
    "7475726E2028636F6D6D69742C20636F6D6D69745F68617368290A0A0A232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "232323232323232323232323230A23206175746F67656E207374617274732068"
    "6572652023232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323230A23"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323232323232323232323232323232323232323"
    "2323232323232323232323232323230A0A23206E6F74653A2074686973207061"
    "72742063616E2062652067656E65726174656420776974682074686520666F6C"
    "6C6F77696E6720636F64653A0A230A23202020202077697468206F70656E2822"
    "6769742D7175696E652E7079222920617320663A0A2320202020202020202064"
    "617461203D20662E7265616428290A230A232020202020656E636F646564203D"
    "2022222E6A6F696E285B227B3A3032587D222E666F726D6174286F7264286329"
    "2920666F72206320696E20646174615D290A230A2320202020206368756E6B73"
    "697A65203D2036340A230A2320202020207072696E74282264617461203D2028"
    "22290A232020202020666F72206920696E2072616E676528302C206C656E2865"
    "6E636F646564292C206368756E6B73697A65293A0A2320202020202020202070"
    "72696E74282720202020227B7D22272E666F726D617428656E636F6465645B69"
    "203A2069202B206368756E6B73697A655D29290A2320202020207072696E7428"
    "222922290A2320202020207072696E7428290A2320202020207072696E742822"
    "6D61696E282922290A0A"
)

main()
